name: Terraform - Apply on PR Merge

on:
  pull_request:
    types:
      - closed
    paths:
      - 'deployment.json'

jobs:
  check-deployment-pr:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      is_deployment: ${{ steps.check.outputs.is_deployment }}
      stack: ${{ steps.check.outputs.stack }}
      environment: ${{ steps.check.outputs.environment }}
      tag: ${{ steps.check.outputs.tag }}
      issue: ${{ steps.check.outputs.issue }}
      auto_promote: ${{ steps.check.outputs.auto_promote }}
      selected_environments: ${{ steps.check.outputs.selected_environments }}
      base_path: ${{ steps.check.outputs.base_path }}
      next_environment: ${{ steps.next.outputs.next_environment }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - id: check
        name: Check if this is a deployment PR
        run: |
          if [ -f "deployment.json" ]; then
            echo "is_deployment=true" >> $GITHUB_OUTPUT
            STACK=$(jq -r '.stack' deployment.json)
            ENV=$(jq -r '.environment' deployment.json)
            TAG=$(jq -r '.tag' deployment.json)
            ISSUE=$(jq -r '.issue' deployment.json)
            AUTO_PROMOTE=$(jq -r '.auto_promote' deployment.json)
            SELECTED_ENVS=$(jq '.selected_environments' deployment.json)
            BASE_PATH=$(jq -r '.base_path // "stacks"' deployment.json)

            echo "stack=$STACK" >> $GITHUB_OUTPUT
            echo "environment=$ENV" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "issue=$ISSUE" >> $GITHUB_OUTPUT
            echo "auto_promote=$AUTO_PROMOTE" >> $GITHUB_OUTPUT
            echo "selected_environments=$SELECTED_ENVS" >> $GITHUB_OUTPUT
            echo "base_path=$BASE_PATH" >> $GITHUB_OUTPUT
          else
            echo "is_deployment=false" >> $GITHUB_OUTPUT
          fi

      - id: next
        name: Determine next environment
        if: steps.check.outputs.is_deployment == 'true'
        run: |
          # Only find next environment if auto-promote is true
          if [ "${{ steps.check.outputs.auto_promote }}" != "true" ]; then
            echo "next_environment=" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Parse selected environments
          SELECTED_ENVS='${{ steps.check.outputs.selected_environments }}'
          CURRENT_ENV="${{ steps.check.outputs.environment }}"

          # Get index of current environment in selected environments
          CURRENT_INDEX=$(echo $SELECTED_ENVS | jq -r "index(\"$CURRENT_ENV\")")

          # Check if there's a next environment in the selection
          if [ $CURRENT_INDEX -lt $(($(echo $SELECTED_ENVS | jq length) - 1)) ]; then
            NEXT_ENV=$(echo $SELECTED_ENVS | jq -r ".[$((CURRENT_INDEX + 1))]")
            echo "next_environment=$NEXT_ENV" >> $GITHUB_OUTPUT
          else
            echo "next_environment=" >> $GITHUB_OUTPUT
          fi

  terraform-apply:
    needs: check-deployment-pr
    if: needs.check-deployment-pr.outputs.is_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init and Apply
        id: apply
        run: |
          cd ${{ needs.check-deployment-pr.outputs.base_path }}/${{ needs.check-deployment-pr.outputs.stack }}
          terraform init
          terraform apply -var-file=environments/${{ needs.check-deployment-pr.outputs.environment }}/terraform.tfvars -auto-approve

      - name: Update tracking issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const stack = '${{ needs.check-deployment-pr.outputs.stack }}';
            const env = '${{ needs.check-deployment-pr.outputs.environment }}';
            const issueNumber = '${{ needs.check-deployment-pr.outputs.issue }}';
            const prNumber = '${{ github.event.pull_request.number }}';
            const approver = '${{ github.event.pull_request.merged_by.login }}';
            const completionTime = new Date().toISOString();

            // Get current issue content
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });

            // Update status table
            let updatedBody = issue.body.replace(
              new RegExp(`\\| ${env.toUpperCase()} \\| Pending \\| - \\| - \\| - \\|`),
              `| ${env.toUpperCase()} | Completed âœ… | ${completionTime} | #${prNumber} | @${approver} |`
            );

            // Add to activity log
            updatedBody += `\n- ${completionTime}: ${env.toUpperCase()} deployment completed via PR #${prNumber}`;

            // Update the issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: updatedBody
            });

            // Add comment to issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `## ${env.toUpperCase()} Deployment Completed âœ…

              Stack \`${stack}\` has been successfully deployed to the ${env.toUpperCase()} environment.

              - PR: #${prNumber}
              - Approved by: @${approver}
              - Completed at: ${completionTime}
              `
            });

  create-next-environment-pr:
    needs: [check-deployment-pr, terraform-apply]
    if: needs.check-deployment-pr.outputs.is_deployment == 'true' && needs.check-deployment-pr.outputs.auto_promote == 'true' && needs.check-deployment-pr.outputs.next_environment != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create PR for next environment
        uses: actions/github-script@v6
        with:
          script: |
            const stack = '${{ needs.check-deployment-pr.outputs.stack }}';
            const nextEnv = '${{ needs.check-deployment-pr.outputs.next_environment }}';
            const tag = '${{ needs.check-deployment-pr.outputs.tag }}';
            const issueNumber = '${{ needs.check-deployment-pr.outputs.issue }}';
            const selectedEnvs = ${{ needs.check-deployment-pr.outputs.selected_environments }};
            const autoPromote = ${{ needs.check-deployment-pr.outputs.auto_promote }};
            const requiredApprovals = '${{ needs.check-deployment-pr.outputs.required_approvals }}';
            const basePath = '${{ needs.check-deployment-pr.outputs.base_path }}';
            const branchName = `deploy/${tag}/${nextEnv}`;

            // Create branch
            await exec.exec('git', ['config', 'user.name', 'GitHub Actions']);
            await exec.exec('git', ['config', 'user.email', 'actions@github.com']);
            await exec.exec('git', ['checkout', '-b', branchName]);

            // Create deployment manifest file
            const fs = require('fs');
            const deploymentConfig = {
              tag: tag,
              stack: stack,
              environment: nextEnv,
              issue: issueNumber,
              auto_promote: autoPromote,
              required_approvals: requiredApprovals,
              selected_environments: selectedEnvs,
              base_path: basePath
            };

            fs.writeFileSync('deployment.json', JSON.stringify(deploymentConfig, null, 2));

            // Commit and push
            await exec.exec('git', ['add', 'deployment.json']);
            await exec.exec('git', ['commit', '-m', `Deployment plan for ${stack} to ${nextEnv}`]);
            await exec.exec('git', ['push', '--set-upstream', 'origin', branchName]);

            // Create progress indicator for PR description
            const progressList = selectedEnvs.map(selectedEnv => {
              if (selectedEnv === nextEnv) {
                return `- [x] ${selectedEnv.toUpperCase()} (this PR)`;
              } else if (selectedEnvs.indexOf(selectedEnv) < selectedEnvs.indexOf(nextEnv)) {
                return `- [x] ${selectedEnv.toUpperCase()} (completed)`;
              } else {
                return `- [ ] ${selectedEnv.toUpperCase()} (pending)`;
              }
            }).join('\n');

            // Create PR
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš€ Deploy ${stack} to ${nextEnv.toUpperCase()}`,
              body: `This PR will deploy the \`${stack}\` stack to the ${nextEnv.toUpperCase()} environment.

              **Deployment Tag:** \`${tag}\`
              **Tracking Issue:** #${issueNumber}
              **Auto-promote:** ${autoPromote ? 'Yes' : 'No'}
              **Required Approvals:** ${requiredApprovals}

              ## Deployment Progress
              ${progressList}

              ## Deployment Process
              1. Review the Terraform plan added as a comment to this PR
              2. Approve and merge this PR to deploy to ${nextEnv.toUpperCase()}
              ${autoPromote && selectedEnvs.indexOf(nextEnv) < selectedEnvs.length - 1 ? '3. The next environment PR will be created automatically upon successful deployment' : '3. This is the final environment in the deployment sequence'}

              This is part of a deployment tracked in issue #${issueNumber}.
              `,
              head: branchName,
              base: 'main'
            });

            console.log(`Created PR #${pr.number} for ${stack} to ${nextEnv}`);

            // Update tracking issue with PR link
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `## ${nextEnv.toUpperCase()} Deployment PR Created

              PR #${pr.number} has been created to deploy stack \`${stack}\` to the ${nextEnv.toUpperCase()} environment.
              `
            });